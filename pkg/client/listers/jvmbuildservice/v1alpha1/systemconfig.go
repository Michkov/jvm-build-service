/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-appstudio/jvm-build-service/pkg/apis/jvmbuildservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// SystemConfigLister helps list SystemConfigs.
// All objects returned here must be treated as read-only.
type SystemConfigLister interface {
	// List lists all SystemConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SystemConfig, err error)
	// SystemConfigs returns an object that can list and get SystemConfigs.
	SystemConfigs(namespace string) SystemConfigNamespaceLister
	SystemConfigListerExpansion
}

// systemConfigLister implements the SystemConfigLister interface.
type systemConfigLister struct {
	indexer cache.Indexer
}

// NewSystemConfigLister returns a new SystemConfigLister.
func NewSystemConfigLister(indexer cache.Indexer) SystemConfigLister {
	return &systemConfigLister{indexer: indexer}
}

// List lists all SystemConfigs in the indexer.
func (s *systemConfigLister) List(selector labels.Selector) (ret []*v1alpha1.SystemConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SystemConfig))
	})
	return ret, err
}

// SystemConfigs returns an object that can list and get SystemConfigs.
func (s *systemConfigLister) SystemConfigs(namespace string) SystemConfigNamespaceLister {
	return systemConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// SystemConfigNamespaceLister helps list and get SystemConfigs.
// All objects returned here must be treated as read-only.
type SystemConfigNamespaceLister interface {
	// List lists all SystemConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.SystemConfig, err error)
	// Get retrieves the SystemConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.SystemConfig, error)
	SystemConfigNamespaceListerExpansion
}

// systemConfigNamespaceLister implements the SystemConfigNamespaceLister
// interface.
type systemConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all SystemConfigs in the indexer for a given namespace.
func (s systemConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.SystemConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.SystemConfig))
	})
	return ret, err
}

// Get retrieves the SystemConfig from the indexer for a given namespace and name.
func (s systemConfigNamespaceLister) Get(name string) (*v1alpha1.SystemConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("systemconfig"), name)
	}
	return obj.(*v1alpha1.SystemConfig), nil
}
