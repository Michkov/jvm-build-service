/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-appstudio/jvm-build-service/pkg/apis/jvmbuildservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// ArtifactBuildLister helps list ArtifactBuilds.
// All objects returned here must be treated as read-only.
type ArtifactBuildLister interface {
	// List lists all ArtifactBuilds in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ArtifactBuild, err error)
	// ArtifactBuilds returns an object that can list and get ArtifactBuilds.
	ArtifactBuilds(namespace string) ArtifactBuildNamespaceLister
	ArtifactBuildListerExpansion
}

// artifactBuildLister implements the ArtifactBuildLister interface.
type artifactBuildLister struct {
	indexer cache.Indexer
}

// NewArtifactBuildLister returns a new ArtifactBuildLister.
func NewArtifactBuildLister(indexer cache.Indexer) ArtifactBuildLister {
	return &artifactBuildLister{indexer: indexer}
}

// List lists all ArtifactBuilds in the indexer.
func (s *artifactBuildLister) List(selector labels.Selector) (ret []*v1alpha1.ArtifactBuild, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArtifactBuild))
	})
	return ret, err
}

// ArtifactBuilds returns an object that can list and get ArtifactBuilds.
func (s *artifactBuildLister) ArtifactBuilds(namespace string) ArtifactBuildNamespaceLister {
	return artifactBuildNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// ArtifactBuildNamespaceLister helps list and get ArtifactBuilds.
// All objects returned here must be treated as read-only.
type ArtifactBuildNamespaceLister interface {
	// List lists all ArtifactBuilds in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.ArtifactBuild, err error)
	// Get retrieves the ArtifactBuild from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.ArtifactBuild, error)
	ArtifactBuildNamespaceListerExpansion
}

// artifactBuildNamespaceLister implements the ArtifactBuildNamespaceLister
// interface.
type artifactBuildNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all ArtifactBuilds in the indexer for a given namespace.
func (s artifactBuildNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.ArtifactBuild, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.ArtifactBuild))
	})
	return ret, err
}

// Get retrieves the ArtifactBuild from the indexer for a given namespace and name.
func (s artifactBuildNamespaceLister) Get(name string) (*v1alpha1.ArtifactBuild, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("artifactbuild"), name)
	}
	return obj.(*v1alpha1.ArtifactBuild), nil
}
