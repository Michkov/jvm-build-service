/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-appstudio/jvm-build-service/pkg/apis/jvmbuildservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// UserConfigLister helps list UserConfigs.
// All objects returned here must be treated as read-only.
type UserConfigLister interface {
	// List lists all UserConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserConfig, err error)
	// UserConfigs returns an object that can list and get UserConfigs.
	UserConfigs(namespace string) UserConfigNamespaceLister
	UserConfigListerExpansion
}

// userConfigLister implements the UserConfigLister interface.
type userConfigLister struct {
	indexer cache.Indexer
}

// NewUserConfigLister returns a new UserConfigLister.
func NewUserConfigLister(indexer cache.Indexer) UserConfigLister {
	return &userConfigLister{indexer: indexer}
}

// List lists all UserConfigs in the indexer.
func (s *userConfigLister) List(selector labels.Selector) (ret []*v1alpha1.UserConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserConfig))
	})
	return ret, err
}

// UserConfigs returns an object that can list and get UserConfigs.
func (s *userConfigLister) UserConfigs(namespace string) UserConfigNamespaceLister {
	return userConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// UserConfigNamespaceLister helps list and get UserConfigs.
// All objects returned here must be treated as read-only.
type UserConfigNamespaceLister interface {
	// List lists all UserConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.UserConfig, err error)
	// Get retrieves the UserConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.UserConfig, error)
	UserConfigNamespaceListerExpansion
}

// userConfigNamespaceLister implements the UserConfigNamespaceLister
// interface.
type userConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all UserConfigs in the indexer for a given namespace.
func (s userConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.UserConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.UserConfig))
	})
	return ret, err
}

// Get retrieves the UserConfig from the indexer for a given namespace and name.
func (s userConfigNamespaceLister) Get(name string) (*v1alpha1.UserConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("userconfig"), name)
	}
	return obj.(*v1alpha1.UserConfig), nil
}
