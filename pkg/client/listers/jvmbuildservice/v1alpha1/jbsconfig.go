/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-appstudio/jvm-build-service/pkg/apis/jvmbuildservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// JBSConfigLister helps list JBSConfigs.
// All objects returned here must be treated as read-only.
type JBSConfigLister interface {
	// List lists all JBSConfigs in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JBSConfig, err error)
	// JBSConfigs returns an object that can list and get JBSConfigs.
	JBSConfigs(namespace string) JBSConfigNamespaceLister
	JBSConfigListerExpansion
}

// jBSConfigLister implements the JBSConfigLister interface.
type jBSConfigLister struct {
	indexer cache.Indexer
}

// NewJBSConfigLister returns a new JBSConfigLister.
func NewJBSConfigLister(indexer cache.Indexer) JBSConfigLister {
	return &jBSConfigLister{indexer: indexer}
}

// List lists all JBSConfigs in the indexer.
func (s *jBSConfigLister) List(selector labels.Selector) (ret []*v1alpha1.JBSConfig, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JBSConfig))
	})
	return ret, err
}

// JBSConfigs returns an object that can list and get JBSConfigs.
func (s *jBSConfigLister) JBSConfigs(namespace string) JBSConfigNamespaceLister {
	return jBSConfigNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// JBSConfigNamespaceLister helps list and get JBSConfigs.
// All objects returned here must be treated as read-only.
type JBSConfigNamespaceLister interface {
	// List lists all JBSConfigs in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.JBSConfig, err error)
	// Get retrieves the JBSConfig from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.JBSConfig, error)
	JBSConfigNamespaceListerExpansion
}

// jBSConfigNamespaceLister implements the JBSConfigNamespaceLister
// interface.
type jBSConfigNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all JBSConfigs in the indexer for a given namespace.
func (s jBSConfigNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.JBSConfig, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.JBSConfig))
	})
	return ret, err
}

// Get retrieves the JBSConfig from the indexer for a given namespace and name.
func (s jBSConfigNamespaceLister) Get(name string) (*v1alpha1.JBSConfig, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("jbsconfig"), name)
	}
	return obj.(*v1alpha1.JBSConfig), nil
}
