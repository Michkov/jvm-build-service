/*
Copyright 2021-2022 Red Hat, Inc.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/
// Code generated by lister-gen. DO NOT EDIT.

package v1alpha1

import (
	v1alpha1 "github.com/redhat-appstudio/jvm-build-service/pkg/apis/jvmbuildservice/v1alpha1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// RebuiltArtifactLister helps list RebuiltArtifacts.
// All objects returned here must be treated as read-only.
type RebuiltArtifactLister interface {
	// List lists all RebuiltArtifacts in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RebuiltArtifact, err error)
	// RebuiltArtifacts returns an object that can list and get RebuiltArtifacts.
	RebuiltArtifacts(namespace string) RebuiltArtifactNamespaceLister
	RebuiltArtifactListerExpansion
}

// rebuiltArtifactLister implements the RebuiltArtifactLister interface.
type rebuiltArtifactLister struct {
	indexer cache.Indexer
}

// NewRebuiltArtifactLister returns a new RebuiltArtifactLister.
func NewRebuiltArtifactLister(indexer cache.Indexer) RebuiltArtifactLister {
	return &rebuiltArtifactLister{indexer: indexer}
}

// List lists all RebuiltArtifacts in the indexer.
func (s *rebuiltArtifactLister) List(selector labels.Selector) (ret []*v1alpha1.RebuiltArtifact, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RebuiltArtifact))
	})
	return ret, err
}

// RebuiltArtifacts returns an object that can list and get RebuiltArtifacts.
func (s *rebuiltArtifactLister) RebuiltArtifacts(namespace string) RebuiltArtifactNamespaceLister {
	return rebuiltArtifactNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// RebuiltArtifactNamespaceLister helps list and get RebuiltArtifacts.
// All objects returned here must be treated as read-only.
type RebuiltArtifactNamespaceLister interface {
	// List lists all RebuiltArtifacts in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1alpha1.RebuiltArtifact, err error)
	// Get retrieves the RebuiltArtifact from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1alpha1.RebuiltArtifact, error)
	RebuiltArtifactNamespaceListerExpansion
}

// rebuiltArtifactNamespaceLister implements the RebuiltArtifactNamespaceLister
// interface.
type rebuiltArtifactNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all RebuiltArtifacts in the indexer for a given namespace.
func (s rebuiltArtifactNamespaceLister) List(selector labels.Selector) (ret []*v1alpha1.RebuiltArtifact, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1alpha1.RebuiltArtifact))
	})
	return ret, err
}

// Get retrieves the RebuiltArtifact from the indexer for a given namespace and name.
func (s rebuiltArtifactNamespaceLister) Get(name string) (*v1alpha1.RebuiltArtifact, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1alpha1.Resource("rebuiltartifact"), name)
	}
	return obj.(*v1alpha1.RebuiltArtifact), nil
}
